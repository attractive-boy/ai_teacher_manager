// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// 管理员表
model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

// 用户表（教师/家长）
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(TEACHER) // TEACHER 或 PARENT
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]  // 教师关联的班级
  evaluations Evaluation[] // 用户创建的评价

  @@map("user")
}

// 班级表
model Class {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teachers  User[]   // 关联的教师
  students  Student[] // 班级的学生
  tasks     Task[]   // 班级的课堂任务

  @@map("class")
}

// 学生表
model Student {
  id        Int      @id @default(autoincrement())
  name      String
  category  String?  // 学生类别
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  scores    Score[]  // 学生的评分记录
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student")
}

// 课堂任务表
model Task {
  id          Int      @id @default(autoincrement())
  title       String   // 任务名称
  content     String   // 任务内容
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  evaluations Evaluation[] // 任务相关的评价

  @@map("task")
}

// 评价表
model Evaluation {
  id          Int      @id @default(autoincrement())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  userId      Int      // 评价人（教师/家长）
  user        User     @relation(fields: [userId], references: [id])
  summary     String?  // AI生成的课堂小结
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scores      Score[]  // 评价包含的分数

  @@map("evaluation")
}

// 评分表
model Score {
  id            Int      @id @default(autoincrement())
  evaluationId  Int
  evaluation    Evaluation @relation(fields: [evaluationId], references: [id])
  studentId     Int
  student       Student    @relation(fields: [studentId], references: [id])
  teacherScore  Int      // 教师评分（1-3星）
  studentScore  Int      // 学生评分（1-2星）
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("score")
}


// 用户角色枚举
enum Role {
  TEACHER
  PARENT
}
