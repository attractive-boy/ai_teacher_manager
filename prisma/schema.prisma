generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        Role         @default(TEACHER)
  username    String       @unique
  avatar      String?      // 添加头像字段，问号表示可选
  classes     Class[]
  evaluations Evaluation[]

  @@map("user")
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teachers  User[]
  students  Student[]
  tasks     Task[]

  @@map("class")
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  category  String?
  classId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  scores    Score[]

  @@map("student")
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  classId     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  class       Class        @relation(fields: [classId], references: [id])
  evaluations Evaluation[]

  @@map("task")
}

model Evaluation {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    Int
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  scores    Score[]

  @@map("evaluation")
}

model Score {
  id           Int        @id @default(autoincrement())
  evaluationId Int
  studentId    Int
  teacherScore Int
  studentScore Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  student      Student    @relation(fields: [studentId], references: [id])

  @@map("score")
}

model CozeConfig {
  id        Int      @id @default(autoincrement())
  token     String
  botId     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coze_config")
}

model classtouser {
  A Int
  B Int

  @@unique([A, B], map: "_ClassToUser_AB_unique")
  @@index([B], map: "_ClassToUser_B_index")
  @@map("_classtouser")
}

enum Role {
  TEACHER
  PARENT
}
